# export ParamLevelSetModelFunc_old

# function ParamLevelSetModelFunc_old(Mesh::RegularMesh,m::Vector; computeJacobian = 1, bf::Int64 = 1,
		 # sigma::Function = (m,n)->(n[:] .= 1.0),
		 # Xc::Array{Float32,2} = convert(Array{Float32,2},getCellCenteredGrid(Mesh)),u::Vector = zeros(prod(Mesh.n)),dsu::Vector = zeros(prod(Mesh.n)),
		 # Ihuge ::Vector{Int32} = zeros(Int32,0), Is = zeros(Int32,0), Js = zeros(Int32,0),Vs = zeros(Float64,0),
		 # iifunc::Function=identity, numParamOfRBF::Int64 = 5)
	# n = Mesh.n;
	# if length(u) != prod(n)
		# error("preallocated u is of wrong size");
	# end
	# u[:] .= 0.0;
	# h = Mesh.h;
	# nRBFs = div(length(m),numParamOfRBF);
	# xmin = Mesh.domain[[1;3;5]];
	

	# if length(Ihuge)==0
		# if numParamOfRBF==5
			# lenIbig = ceil(Int64,0.6*((2.0*0.9)^3)*prod(1.0./h)*sum(1.0./(abs.(m[2:5:end]).^3.0)));
		# else
			# lenIbig = 0;
			# vol = 0.0;
			# # for k=1:nRBFs
				# # (l1,l2,l3,l4,l5,l6) = getL(k,m);
				# # l1*=l4; l1*=l6; # l1 holds sqrt(det(LL^T)) = det(L);
				# # vol += 1.0/l1;
			# # end
			# for k=1:nRBFs
				# (a1,a2,a3,a4,a5,a6) = getA(k,m);
				# A = [a1  a2 a3 ; a2 a4 a5 ; a3 a5 a6];
				# a1 = sqrt(det(A));
				# vol += 1.0/a1;
			# end
			# lenIbig = ceil(Int64,0.6*((2.0*0.9)^3)*prod(1.0./h)*vol);
		# end
		# # println("Allocating Ihuge: ",lenIbig);
		# Ihuge = zeros(Int32,lenIbig);
	# end
	# Istarts = zeros(Int64,nRBFs+1);
	# Istarts[1] = 1;
	
	# ## in run 1 we calculate u. in run 2 we calculate J after we know the derivative of the heavySide. 
	# ii_count_huge = 1;
	# for k=1:nRBFs
		# if numParamOfRBF==5
			# ii_count_huge = computeFuncAndUpdateIhuge!(m,k,Xc,h,n,Ihuge,Istarts,u,xmin,ii_count_huge);
		# else
			# # putting this inside the function takes a huge amount of time... go figure..
			# (a1,a2,a3,a4,a5,a6) = getA(k,m);
			# A = [a1 a2 a3 ; a2 a4 a5 ; a3 a5 a6];
			# beta = sqrt(minimum(eigvals(A)));
			# ii_count_huge = computeFuncAndUpdateIhuge_ellipsoids!(m,k,Xc,h,n,Ihuge,Istarts,u,xmin,ii_count_huge,beta);
		# end
	# end
	# # if 10*ii_count_huge < lenIbig
		# # warn("Reached to: ", ii_count_huge, " when allocated ",lenIbig)
	# # end
	# sigma(u,dsu);
	# nnzJ = 0
	# if computeJacobian == 1
		# nnzJ = shrinkIhugeFromDsu!(Ihuge,Istarts,dsu,numParamOfRBF);
		# if nnzJ > length(Is)
			# newnnzJ = ceil(Int64,1.25*nnzJ);
			# Is = ones(Int32,newnnzJ);
			# Js = ones(Int32,newnnzJ);
			# Vs = zeros(Float64,newnnzJ);
		# end
		# curr = 1;
		# for k=1:nRBFs
			# if numParamOfRBF==5
				# curr = updateJacobianArrays!(k,m,curr,dsu,Is,Js,Vs,u,Ihuge,Istarts,iifunc,Xc);
			# else
				# curr = updateJacobianArrays_ellipsoids!(k,m,curr,dsu,Is,Js,Vs,u,Ihuge,Istarts,iifunc,Xc);
			# end
		# end	
	# end
	# return u,Is,Js,Vs,Ihuge; # J = sparse(Is,Js,Vs,prod(n),length(m));
# end

# function shrinkIhugeFromDsu!(Ihuge::Vector{Int32},Istarts::Vector{Int64},dsu::Vector{Float64},numParamOfRBF::Int64 = 5)
# md = 1e-3*maximum(abs.(dsu));
# jj_rel = 1;
# for k=1:(length(Istarts)-1)
	# for jj = (Istarts[k]):(Istarts[k+1]-1)
		# if dsu[Ihuge[jj]] >= md
			# Ihuge[jj_rel] = Ihuge[jj];
			# jj_rel+=1;
		# end
	# end
	# Istarts[k] = jj_rel; # this should actually be k+1 but it interfere with the loop.
	# # fixed immediately after loop.
# end
# for k=length(Istarts):-1:2
	# Istarts[k] = Istarts[k-1];
# end
# Istarts[1]=1;
# return numParamOfRBF*(Istarts[end]-1);
# end



# function computeFuncAndUpdateIhuge_ellipsoids!(m::Vector{Float64},k::Int64,Xc::Array{Float32},h::Vector{Float64},n::Vector{Int64},
		# Ihuge::Vector{Int32},Istarts::Vector{Int64},u::Vector{Float64},xmin::Vector{Float64},ii_count_huge::Int64,beta::Float64)
# numParamOfRBF = 10;
# (x1,x2,x3) = getXt(k,m,numParamOfRBF);
# i = round.(Int64,(getX(k,m,numParamOfRBF) - xmin)./h .+ 0.5);
# # ## here we take a reasonable box around the bf. 
# # ## The constant depends on the type of RBF that we take.
# (a1,a2,a3,a4,a5,a6) = getA(k,m);
# boxL = ceil.(Int64,0.9./(h*beta));
# imax = min.(i + boxL,n);
# imin = max.(i - boxL,[1;1;1]);
# alpha = getAlpha(k,m,numParamOfRBF);


# iishift2 = 0;
# for l = imin[3]:imax[3]
	# @inbounds iishift3 = (l-1)*n[1]*n[2];
	# for j = imin[2]:imax[2]
		# @inbounds iishift2 = iishift3 + (j-1)*n[1];
		# for q = imin[1]:imax[1]
			# ii = iishift2 + q;
			# nX = 0.0;
			# @inbounds y1 = Xc[ii,1]-x1;
			# @inbounds y2 = Xc[ii,2]-x2;
			# @inbounds y3 = Xc[ii,3]-x3;
			# Ay1,Ay2,Ay3 = mulA(a1,a2,a3,a4,a5,a6,y1,y2,y3);
			# y1*=Ay1;y2*=Ay2;y3*=Ay3; 
			# nX+=y1;nX+=y2;nX+=y3;
			# if (nX <= 0.81) # 0.77~0.875^2
				# argii = radiust(nX);
				# argii = psi1(argii);
				# argii *= alpha;
				# @inbounds u[ii] += argii;
				# Ihuge[ii_count_huge] = ii;
				# ii_count_huge += 1;
			# end
		# end
	# end
# end
# Istarts[k+1] = ii_count_huge;
# return ii_count_huge;
# end



# function updateJacobianArrays_ellipsoids!(k::Int64,m::Vector{Float64},curr::Int64,dsu::Vector{Float64},Is::Vector{Int32},Js::Vector{Int32},Vs::Vector{Float64},u::Vector{Float64},Ihuge::Vector{Int32},Istarts::Vector{Int64},iifunc::Function,Xc::Array{Float32})
# numParamOfRBF = 10;
# (x1,x2,x3) = getXt(k,m,numParamOfRBF);
# alpha = getAlpha(k,m,numParamOfRBF);
# (a1,a2,a3,a4,a5,a6) = getA(k,m);

# offset = convert(Int32,(k-1)*numParamOfRBF + 1);
# temp = 0.0;
# for iih = (Istarts[k]):(Istarts[k+1]-1)
	# @inbounds ii = Ihuge[iih];
	# @inbounds temp = dsu[ii];
	# @inbounds z1 = x1 - Xc[ii,1]; 
	# @inbounds z2 = x2 - Xc[ii,2]; 
	# @inbounds z3 = x3 - Xc[ii,3];
	# (Az1,Az2,Az3) = mulA(a1,a2,a3,a4,a5,a6,z1,z2,z3);
	# radii = z1*Az1 + z2*Az2 + z3*Az3;
	# radii = radiust(radii);
	# psi,dpsi = dpsi1_t(radii);
	# psi*=temp;
	# @inbounds Vs[curr] = psi;
	# temp *= alpha;
	# temp /= radii;
	# temp *= dpsi;
	# psi = z1; psi*=temp;
	# @inbounds Vs[curr+1] = 0.5*z1*psi; 
	# @inbounds Vs[curr+2] = z2*psi;
	# @inbounds Vs[curr+3] = z3*psi;
	# psi = z2; psi*=temp;z2*=0.5;z2*=psi;
	# @inbounds Vs[curr+4] = z2;
	# @inbounds Vs[curr+5] = z3*psi;
	# @inbounds Vs[curr+6] = 0.5*z3*z3*temp;
	# Az1*=temp;Az2 *= temp; Az3 *= temp; 
	# @inbounds Vs[curr+7] = Az1;
	# @inbounds Vs[curr+8] = Az2;
	# @inbounds Vs[curr+9] = Az3;
	
	# ii = iifunc(ii);
	# for p = 0:(numParamOfRBF-1)
		# @inbounds Is[curr+p] = ii;
		# @inbounds Js[curr+p] = offset + Int32(p);
	# end				
	# curr += numParamOfRBF;				
# end
# return curr;
# end 